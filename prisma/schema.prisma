// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String?
  email       String    @unique
  password    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  isActive    Boolean?  @default(false)
  trip        Trip[]
  friends     Friend[]
  savedPlaces Place[]
  reviews     Review[]

  @@index([email])
}

model Friend {
  id        String    @id @default(uuid())
  image     String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isActive  Boolean?  @default(false)
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?

  @@index([name])
}

model Trip {
  id          String    @id @default(uuid())
  destination Place[]
  startDate   DateTime  @default(now())
  endDate     DateTime
  duration    Int
  preferences String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  isActive    Boolean?  @default(false)
  traveler    User      @relation(fields: [travelerId], references: [id])
  travelerId  String

  @@index([preferences])
}

model Chatgpt {
  id        String    @id @default(uuid())
  choices   String[]
  createdAt DateTime
  updatedAt DateTime? @updatedAt
  isActive  Boolean?  @default(false)
}

model Place {
  id        String     @id @default(uuid())
  name      String
  location  Location[]
  website   String
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  isActive  Boolean?   @default(false)
  Trip      Trip?      @relation(fields: [tripId], references: [id])
  tripId    String?
  reviews   Review[]
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?

  @@index([name])
}

model Location {
  id        String    @id @default(uuid())
  name      String
  ratings   Float
  latitude  Float
  longitude Float
  openTime  DateTime
  closeTime DateTime
  isOpen    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isActive  Boolean?  @default(false)
  Place     Place?    @relation(fields: [placeId], references: [id])
  placeId   String?

  @@index([name])
}

model Review {
  id            String    @id @default(uuid())
  reviewerImage String
  name          String
  ratings       Boolean   @default(false)
  comment       String
  images        Image[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  isActive      Boolean?  @default(false)
  place         Place?    @relation(fields: [placeId], references: [id])
  placeId       String?
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?

  @@index([name])
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  altText   String?
  caption   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review    Review?  @relation(fields: [reviewId], references: [id])
  reviewId  String?
}
